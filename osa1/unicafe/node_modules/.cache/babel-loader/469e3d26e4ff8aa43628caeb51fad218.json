{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Heikki.000\\\\fullstack-2019\\\\palautukset\\\\osa1\\\\unicafe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Heikki.000\\\\fullstack-2019\\\\palautukset\\\\osa1\\\\unicafe\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistic = props => {\n  return React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.text), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, props.value));\n};\n\nconst Statistics = props => {\n  let total = props.good + props.neutral + props.bad;\n\n  if (total === 0) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, 'statistics')), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, 'no feedback given'));\n  }\n\n  function round(value, decimals) {\n    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n  }\n\n  let average = (props.good - props.bad) / total;\n  average = round(average, 1);\n  let positive = 100 * (props.good / total);\n  positive = round(positive, 1);\n  positive = positive + ' %';\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, 'statistics')), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Statistic, {\n    text: \"good\",\n    value: props.good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"neutral\",\n    value: props.neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"bad\",\n    value: props.bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"total\",\n    value: total,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"average\",\n    value: average,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"positive\",\n    value: positive,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })));\n};\n\nconst Button = props => React.createElement(\"button\", {\n  onClick: props.handleClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}, props.text);\n\nconst App = () => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n  /* tallenna napit omaan tilaansa\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0) */\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, 'give feedback')), React.createElement(Button, {\n    handleClick: () => setGood(good + 1),\n    text: \"good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => setNeutral(neutral + 1),\n    text: \"neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => setBad(bad + 1),\n    text: \"bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }))));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Heikki.000/fullstack-2019/palautukset/osa1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Statistic","props","text","value","Statistics","total","good","neutral","bad","round","decimals","Number","Math","average","positive","Button","handleClick","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,IAAX,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAK,CAACE,KAAX,CAFF,CADF;AAMD,CAPD;;AAQA,MAAMC,UAAU,GAAIH,KAAD,IAAW;AAC5B,MAAII,KAAK,GAAGJ,KAAK,CAACK,IAAN,GAAaL,KAAK,CAACM,OAAnB,GAA6BN,KAAK,CAACO,GAA/C;;AACA,MAAIH,KAAK,KAAK,CAAd,EAAiB;AACf,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,YAAJ,CADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,mBAAJ,CAJF,CADF;AAQD;;AACD,WAASI,KAAT,CAAeN,KAAf,EAAsBO,QAAtB,EAAgC;AAC9B,WAAOC,MAAM,CAACC,IAAI,CAACH,KAAL,CAAWN,KAAK,GAAC,GAAN,GAAUO,QAArB,IAA+B,IAA/B,GAAoCA,QAArC,CAAb;AACD;;AACD,MAAIG,OAAO,GAAG,CAACZ,KAAK,CAACK,IAAN,GAAaL,KAAK,CAACO,GAApB,IAA0BH,KAAxC;AACAQ,EAAAA,OAAO,GAAGJ,KAAK,CAACI,OAAD,EAAU,CAAV,CAAf;AACA,MAAIC,QAAQ,GAAI,OAASb,KAAK,CAACK,IAAN,GAAaD,KAAtB,CAAhB;AACAS,EAAAA,QAAQ,GAAGL,KAAK,CAACK,QAAD,EAAW,CAAX,CAAhB;AACAA,EAAAA,QAAQ,GAAGA,QAAQ,GAAG,IAAtB;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI,YAAJ,CADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,MAAhB;AAAuB,IAAA,KAAK,EAAGb,KAAK,CAACK,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,SAAhB;AAA0B,IAAA,KAAK,EAAGL,KAAK,CAACM,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAGA,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,KAAhB;AAAsB,IAAA,KAAK,EAAGN,KAAK,CAACO,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,EAIA,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,OAAhB;AAAwB,IAAA,KAAK,EAAGH,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,EAKA,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,SAAhB;AAA0B,IAAA,KAAK,EAAGQ,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALA,EAMA,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,UAAhB;AAA2B,IAAA,KAAK,EAAGC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANA,CAJF,CADF;AAeD,CAnCD;;AAoCA,MAAMC,MAAM,GAAId,KAAD,IACb;AAAQ,EAAA,OAAO,EAAEA,KAAK,CAACe,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGf,KAAK,CAACC,IADT,CADF;;AAMA,MAAMe,GAAG,GAAG,MAAM;AAAA,oBACQnB,QAAQ,CAAC,CAAD,CADhB;AAAA;AAAA,QACTQ,IADS;AAAA,QACHY,OADG;;AAAA,qBAEcpB,QAAQ,CAAC,CAAD,CAFtB;AAAA;AAAA,QAETS,OAFS;AAAA,QAEAY,UAFA;;AAAA,qBAGMrB,QAAQ,CAAC,CAAD,CAHd;AAAA;AAAA,QAGTU,GAHS;AAAA,QAGJY,MAHI;AAKhB;;;;;;AAKA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI,eAAJ,CADF,CADF,EAII,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,MAAMF,OAAO,CAACZ,IAAI,GAAG,CAAR,CAAlC;AAA8C,IAAA,IAAI,EAAC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,MAAMa,UAAU,CAACZ,OAAO,GAAG,CAAX,CAArC;AAAoD,IAAA,IAAI,EAAC,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAMI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,MAAMa,MAAM,CAACZ,GAAG,GAAG,CAAP,CAAjC;AAA4C,IAAA,IAAI,EAAC,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEF,IAAlB;AAAwB,IAAA,OAAO,EAAEC,OAAjC;AAA0C,IAAA,GAAG,EAAEC,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARJ,CADJ,CADF;AAiBD,CA3BD;;AA6BAT,QAAQ,CAACsB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EACEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADF","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n  return (\n    <tr>\n      <td>{props.text}</td>\n      <td>{props.value}</td>\n    </tr>\n  )\n}\nconst Statistics = (props) => {\n  let total = props.good + props.neutral + props.bad\n  if (total === 0) {\n    return (\n      <div>\n        <h3>\n          <p>{'statistics'}</p>\n        </h3>\n        <p>{'no feedback given'}</p>\n      </div>\n    )\n  }\n  function round(value, decimals) {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n  }\n  let average = (props.good - props.bad)/(total)\n  average = round(average, 1)\n  let positive = (100  *  (props.good /(total)))\n  positive = round(positive, 1)\n  positive = positive + ' %'\n  return (\n    <div>\n      <h3>\n        <p>{'statistics'}</p>\n      </h3>\n      <table>\n      <Statistic text=\"good\" value ={props.good} />\n      <Statistic text=\"neutral\" value ={props.neutral} />\n      <Statistic text=\"bad\" value ={props.bad} />\n      <Statistic text=\"total\" value ={total} />\n      <Statistic text=\"average\" value ={average} />\n      <Statistic text=\"positive\" value ={positive} />\n      </table>\n    </div>\n  )\n}\nconst Button = (props) => (\n  <button onClick={props.handleClick}>\n    {props.text}\n  </button>\n)\n\nconst App = () => {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n \n  /* tallenna napit omaan tilaansa\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0) */\n  \n  return (\n    <div>\n        <div>\n          <h2>\n            <p>{'give feedback'}</p>\n          </h2>\n            <Button handleClick={() => setGood(good + 1)} text=\"good\" />\n            <Button handleClick={() => setNeutral(neutral + 1)} text=\"neutral\" />\n            <Button handleClick={() => setBad(bad + 1)} text=\"bad\" />\n\n            <div>\n              <Statistics good={good} neutral={neutral} bad={bad} />\n            </div>\n        </div>\n\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}